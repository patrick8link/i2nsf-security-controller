# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import event_capabilities
from . import condition_capabilities
from . import action_capabilities
from . import nsf_specification
from . import nsf_access_info
class nsf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-i2nsf-registration-interface - based on the path /ietf_i2nsf_registration_interface_rpc/nsf-capability-registration/output/nsf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The reply of the query to register the NSFs capabilities.
The capabilities requested in the input field can be covered
by multiple NSFs. This list consists of NSF(s) that cover
every capability specified in the input field.  The
selection method of which NSF(s) that should be listed in
the output field depends on the implementer.  If any of
the capabilities specified in the input field cannot be
covered by any NSF, the reply should return an <rpc-error>
with <error-message> of those capabilities.
  """
  __slots__ = ('_path_helper', '_extmethods', '__nsf_name','__version','__directional_capabilities','__event_capabilities','__condition_capabilities','__action_capabilities','__resolution_strategy_capabilities','__default_action_capabilities','__nsf_specification','__nsf_access_info',)

  _yang_name = 'nsf'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__nsf_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    self.__directional_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__event_capabilities = YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__condition_capabilities = YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__action_capabilities = YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__resolution_strategy_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__default_action_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__nsf_specification = YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__nsf_access_info = YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ietf_i2nsf_registration_interface_rpc', 'nsf-capability-registration', 'output', 'nsf']

  def _get_nsf_name(self):
    """
    Getter method for nsf_name, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_name (string)

    YANG Description: The name of this registered NSF. The NSF name MUST be
unique to identify the NSF with the capability. The name
can be an arbitrary string including Fully Qualified
Domain Name (FQDN).
    """
    return self.__nsf_name
      
  def _set_nsf_name(self, v, load=False):
    """
    Setter method for nsf_name, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_name() directly.

    YANG Description: The name of this registered NSF. The NSF name MUST be
unique to identify the NSF with the capability. The name
can be an arbitrary string including Fully Qualified
Domain Name (FQDN).
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)""",
        })

    self.__nsf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_name(self):
    self.__nsf_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/version (string)

    YANG Description: The NSF's current version level of the software in use.
This string MAY indicate the specific software build date and
target variant information.
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: The NSF's current version level of the software in use.
This string MAY indicate the specific software build date and
target variant information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)


  def _get_directional_capabilities(self):
    """
    Getter method for directional_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/directional_capabilities (identityref)

    YANG Description: The capability of an NSF for handling directional traffic
flow (i.e., unidirectional or bidirectional traffic flow).
    """
    return self.__directional_capabilities
      
  def _set_directional_capabilities(self, v, load=False):
    """
    Setter method for directional_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/directional_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_directional_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_directional_capabilities() directly.

    YANG Description: The capability of an NSF for handling directional traffic
flow (i.e., unidirectional or bidirectional traffic flow).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """directional_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__directional_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_directional_capabilities(self):
    self.__directional_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_event_capabilities(self):
    """
    Getter method for event_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/event_capabilities (container)

    YANG Description: Capabilities of events.
If a network security function has the event capabilities,
the network security function supports rule execution
according to system event and system alarm.
    """
    return self.__event_capabilities
      
  def _set_event_capabilities(self, v, load=False):
    """
    Setter method for event_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/event_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_capabilities() directly.

    YANG Description: Capabilities of events.
If a network security function has the event capabilities,
the network security function supports rule execution
according to system event and system alarm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__event_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_capabilities(self):
    self.__event_capabilities = YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_condition_capabilities(self):
    """
    Getter method for condition_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/condition_capabilities (container)

    YANG Description: Conditions capabilities.
    """
    return self.__condition_capabilities
      
  def _set_condition_capabilities(self, v, load=False):
    """
    Setter method for condition_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/condition_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_condition_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_condition_capabilities() directly.

    YANG Description: Conditions capabilities.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """condition_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__condition_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_condition_capabilities(self):
    self.__condition_capabilities = YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_action_capabilities(self):
    """
    Getter method for action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/action_capabilities (container)

    YANG Description: Action capabilities.
If a network security function has the action capabilities,
the network security function supports the attendant
actions for policy rules.
    """
    return self.__action_capabilities
      
  def _set_action_capabilities(self, v, load=False):
    """
    Setter method for action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/action_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action_capabilities() directly.

    YANG Description: Action capabilities.
If a network security function has the action capabilities,
the network security function supports the attendant
actions for policy rules.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__action_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action_capabilities(self):
    self.__action_capabilities = YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_resolution_strategy_capabilities(self):
    """
    Getter method for resolution_strategy_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/resolution_strategy_capabilities (identityref)

    YANG Description: Resolution strategy capabilities.
The resolution strategies can be used to specify how
to resolve conflicts that occur between the actions
of the similar or different policy rules that are matched
for the same packet and by particular NSF; note that a
badly written policy rule may cause a conflict of actions
with another similar policy rule.
    """
    return self.__resolution_strategy_capabilities
      
  def _set_resolution_strategy_capabilities(self, v, load=False):
    """
    Setter method for resolution_strategy_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/resolution_strategy_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resolution_strategy_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resolution_strategy_capabilities() directly.

    YANG Description: Resolution strategy capabilities.
The resolution strategies can be used to specify how
to resolve conflicts that occur between the actions
of the similar or different policy rules that are matched
for the same packet and by particular NSF; note that a
badly written policy rule may cause a conflict of actions
with another similar policy rule.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resolution_strategy_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__resolution_strategy_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resolution_strategy_capabilities(self):
    self.__resolution_strategy_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_default_action_capabilities(self):
    """
    Getter method for default_action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/default_action_capabilities (identityref)

    YANG Description: Default action capabilities.
A default action is used to execute I2NSF policy rules
when no rule matches a packet. The default action is
defined as pass, drop, reject, rate-limit, or mirror.
    """
    return self.__default_action_capabilities
      
  def _set_default_action_capabilities(self, v, load=False):
    """
    Setter method for default_action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/default_action_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_action_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_action_capabilities() directly.

    YANG Description: Default action capabilities.
A default action is used to execute I2NSF policy rules
when no rule matches a packet. The default action is
defined as pass, drop, reject, rate-limit, or mirror.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_action_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__default_action_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_action_capabilities(self):
    self.__default_action_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_nsf_specification(self):
    """
    Getter method for nsf_specification, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_specification (container)

    YANG Description: The specification of an NSF.
    """
    return self.__nsf_specification
      
  def _set_nsf_specification(self, v, load=False):
    """
    Setter method for nsf_specification, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_specification (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_specification is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_specification() directly.

    YANG Description: The specification of an NSF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_specification must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__nsf_specification = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_specification(self):
    self.__nsf_specification = YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_nsf_access_info(self):
    """
    Getter method for nsf_access_info, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_access_info (container)

    YANG Description: Network access information of this NSF.
    """
    return self.__nsf_access_info
      
  def _set_nsf_access_info(self, v, load=False):
    """
    Setter method for nsf_access_info, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_access_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_access_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_access_info() directly.

    YANG Description: Network access information of this NSF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_access_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__nsf_access_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_access_info(self):
    self.__nsf_access_info = YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)

  nsf_name = __builtin__.property(_get_nsf_name, _set_nsf_name)
  version = __builtin__.property(_get_version, _set_version)
  directional_capabilities = __builtin__.property(_get_directional_capabilities, _set_directional_capabilities)
  event_capabilities = __builtin__.property(_get_event_capabilities, _set_event_capabilities)
  condition_capabilities = __builtin__.property(_get_condition_capabilities, _set_condition_capabilities)
  action_capabilities = __builtin__.property(_get_action_capabilities, _set_action_capabilities)
  resolution_strategy_capabilities = __builtin__.property(_get_resolution_strategy_capabilities, _set_resolution_strategy_capabilities)
  default_action_capabilities = __builtin__.property(_get_default_action_capabilities, _set_default_action_capabilities)
  nsf_specification = __builtin__.property(_get_nsf_specification, _set_nsf_specification)
  nsf_access_info = __builtin__.property(_get_nsf_access_info, _set_nsf_access_info)


  _pyangbind_elements = OrderedDict([('nsf_name', nsf_name), ('version', version), ('directional_capabilities', directional_capabilities), ('event_capabilities', event_capabilities), ('condition_capabilities', condition_capabilities), ('action_capabilities', action_capabilities), ('resolution_strategy_capabilities', resolution_strategy_capabilities), ('default_action_capabilities', default_action_capabilities), ('nsf_specification', nsf_specification), ('nsf_access_info', nsf_access_info), ])


from . import event_capabilities
from . import condition_capabilities
from . import action_capabilities
from . import nsf_specification
from . import nsf_access_info
class nsf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-i2nsf-registration-interface - based on the path /ietf_i2nsf_registration_interface_rpc/nsf-capability-registration/output/nsf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The reply of the query to register the NSFs capabilities.
The capabilities requested in the input field can be covered
by multiple NSFs. This list consists of NSF(s) that cover
every capability specified in the input field.  The
selection method of which NSF(s) that should be listed in
the output field depends on the implementer.  If any of
the capabilities specified in the input field cannot be
covered by any NSF, the reply should return an <rpc-error>
with <error-message> of those capabilities.
  """
  __slots__ = ('_path_helper', '_extmethods', '__nsf_name','__version','__directional_capabilities','__event_capabilities','__condition_capabilities','__action_capabilities','__resolution_strategy_capabilities','__default_action_capabilities','__nsf_specification','__nsf_access_info',)

  _yang_name = 'nsf'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__nsf_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    self.__directional_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__event_capabilities = YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__condition_capabilities = YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__action_capabilities = YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__resolution_strategy_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__default_action_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__nsf_specification = YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__nsf_access_info = YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ietf_i2nsf_registration_interface_rpc', 'nsf-capability-registration', 'output', 'nsf']

  def _get_nsf_name(self):
    """
    Getter method for nsf_name, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_name (string)

    YANG Description: The name of this registered NSF. The NSF name MUST be
unique to identify the NSF with the capability. The name
can be an arbitrary string including Fully Qualified
Domain Name (FQDN).
    """
    return self.__nsf_name
      
  def _set_nsf_name(self, v, load=False):
    """
    Setter method for nsf_name, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_name() directly.

    YANG Description: The name of this registered NSF. The NSF name MUST be
unique to identify the NSF with the capability. The name
can be an arbitrary string including Fully Qualified
Domain Name (FQDN).
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)""",
        })

    self.__nsf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_name(self):
    self.__nsf_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/version (string)

    YANG Description: The NSF's current version level of the software in use.
This string MAY indicate the specific software build date and
target variant information.
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: The NSF's current version level of the software in use.
This string MAY indicate the specific software build date and
target variant information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)


  def _get_directional_capabilities(self):
    """
    Getter method for directional_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/directional_capabilities (identityref)

    YANG Description: The capability of an NSF for handling directional traffic
flow (i.e., unidirectional or bidirectional traffic flow).
    """
    return self.__directional_capabilities
      
  def _set_directional_capabilities(self, v, load=False):
    """
    Setter method for directional_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/directional_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_directional_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_directional_capabilities() directly.

    YANG Description: The capability of an NSF for handling directional traffic
flow (i.e., unidirectional or bidirectional traffic flow).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """directional_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__directional_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_directional_capabilities(self):
    self.__directional_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_event_capabilities(self):
    """
    Getter method for event_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/event_capabilities (container)

    YANG Description: Capabilities of events.
If a network security function has the event capabilities,
the network security function supports rule execution
according to system event and system alarm.
    """
    return self.__event_capabilities
      
  def _set_event_capabilities(self, v, load=False):
    """
    Setter method for event_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/event_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_capabilities() directly.

    YANG Description: Capabilities of events.
If a network security function has the event capabilities,
the network security function supports rule execution
according to system event and system alarm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__event_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_capabilities(self):
    self.__event_capabilities = YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_condition_capabilities(self):
    """
    Getter method for condition_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/condition_capabilities (container)

    YANG Description: Conditions capabilities.
    """
    return self.__condition_capabilities
      
  def _set_condition_capabilities(self, v, load=False):
    """
    Setter method for condition_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/condition_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_condition_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_condition_capabilities() directly.

    YANG Description: Conditions capabilities.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """condition_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__condition_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_condition_capabilities(self):
    self.__condition_capabilities = YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_action_capabilities(self):
    """
    Getter method for action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/action_capabilities (container)

    YANG Description: Action capabilities.
If a network security function has the action capabilities,
the network security function supports the attendant
actions for policy rules.
    """
    return self.__action_capabilities
      
  def _set_action_capabilities(self, v, load=False):
    """
    Setter method for action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/action_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action_capabilities() directly.

    YANG Description: Action capabilities.
If a network security function has the action capabilities,
the network security function supports the attendant
actions for policy rules.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__action_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action_capabilities(self):
    self.__action_capabilities = YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_resolution_strategy_capabilities(self):
    """
    Getter method for resolution_strategy_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/resolution_strategy_capabilities (identityref)

    YANG Description: Resolution strategy capabilities.
The resolution strategies can be used to specify how
to resolve conflicts that occur between the actions
of the similar or different policy rules that are matched
for the same packet and by particular NSF; note that a
badly written policy rule may cause a conflict of actions
with another similar policy rule.
    """
    return self.__resolution_strategy_capabilities
      
  def _set_resolution_strategy_capabilities(self, v, load=False):
    """
    Setter method for resolution_strategy_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/resolution_strategy_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resolution_strategy_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resolution_strategy_capabilities() directly.

    YANG Description: Resolution strategy capabilities.
The resolution strategies can be used to specify how
to resolve conflicts that occur between the actions
of the similar or different policy rules that are matched
for the same packet and by particular NSF; note that a
badly written policy rule may cause a conflict of actions
with another similar policy rule.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resolution_strategy_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__resolution_strategy_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resolution_strategy_capabilities(self):
    self.__resolution_strategy_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_default_action_capabilities(self):
    """
    Getter method for default_action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/default_action_capabilities (identityref)

    YANG Description: Default action capabilities.
A default action is used to execute I2NSF policy rules
when no rule matches a packet. The default action is
defined as pass, drop, reject, rate-limit, or mirror.
    """
    return self.__default_action_capabilities
      
  def _set_default_action_capabilities(self, v, load=False):
    """
    Setter method for default_action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/default_action_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_action_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_action_capabilities() directly.

    YANG Description: Default action capabilities.
A default action is used to execute I2NSF policy rules
when no rule matches a packet. The default action is
defined as pass, drop, reject, rate-limit, or mirror.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_action_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__default_action_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_action_capabilities(self):
    self.__default_action_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_nsf_specification(self):
    """
    Getter method for nsf_specification, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_specification (container)

    YANG Description: The specification of an NSF.
    """
    return self.__nsf_specification
      
  def _set_nsf_specification(self, v, load=False):
    """
    Setter method for nsf_specification, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_specification (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_specification is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_specification() directly.

    YANG Description: The specification of an NSF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_specification must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__nsf_specification = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_specification(self):
    self.__nsf_specification = YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_nsf_access_info(self):
    """
    Getter method for nsf_access_info, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_access_info (container)

    YANG Description: Network access information of this NSF.
    """
    return self.__nsf_access_info
      
  def _set_nsf_access_info(self, v, load=False):
    """
    Setter method for nsf_access_info, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_access_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_access_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_access_info() directly.

    YANG Description: Network access information of this NSF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_access_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__nsf_access_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_access_info(self):
    self.__nsf_access_info = YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)

  nsf_name = __builtin__.property(_get_nsf_name, _set_nsf_name)
  version = __builtin__.property(_get_version, _set_version)
  directional_capabilities = __builtin__.property(_get_directional_capabilities, _set_directional_capabilities)
  event_capabilities = __builtin__.property(_get_event_capabilities, _set_event_capabilities)
  condition_capabilities = __builtin__.property(_get_condition_capabilities, _set_condition_capabilities)
  action_capabilities = __builtin__.property(_get_action_capabilities, _set_action_capabilities)
  resolution_strategy_capabilities = __builtin__.property(_get_resolution_strategy_capabilities, _set_resolution_strategy_capabilities)
  default_action_capabilities = __builtin__.property(_get_default_action_capabilities, _set_default_action_capabilities)
  nsf_specification = __builtin__.property(_get_nsf_specification, _set_nsf_specification)
  nsf_access_info = __builtin__.property(_get_nsf_access_info, _set_nsf_access_info)


  _pyangbind_elements = OrderedDict([('nsf_name', nsf_name), ('version', version), ('directional_capabilities', directional_capabilities), ('event_capabilities', event_capabilities), ('condition_capabilities', condition_capabilities), ('action_capabilities', action_capabilities), ('resolution_strategy_capabilities', resolution_strategy_capabilities), ('default_action_capabilities', default_action_capabilities), ('nsf_specification', nsf_specification), ('nsf_access_info', nsf_access_info), ])


from . import event_capabilities
from . import condition_capabilities
from . import action_capabilities
from . import nsf_specification
from . import nsf_access_info
class nsf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-i2nsf-registration-interface - based on the path /ietf_i2nsf_registration_interface_rpc/nsf-capability-registration/output/nsf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The reply of the query to register the NSFs capabilities.
The capabilities requested in the input field can be covered
by multiple NSFs. This list consists of NSF(s) that cover
every capability specified in the input field.  The
selection method of which NSF(s) that should be listed in
the output field depends on the implementer.  If any of
the capabilities specified in the input field cannot be
covered by any NSF, the reply should return an <rpc-error>
with <error-message> of those capabilities.
  """
  __slots__ = ('_path_helper', '_extmethods', '__nsf_name','__version','__directional_capabilities','__event_capabilities','__condition_capabilities','__action_capabilities','__resolution_strategy_capabilities','__default_action_capabilities','__nsf_specification','__nsf_access_info',)

  _yang_name = 'nsf'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__nsf_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    self.__directional_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__event_capabilities = YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__condition_capabilities = YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__action_capabilities = YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__resolution_strategy_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__default_action_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__nsf_specification = YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__nsf_access_info = YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ietf_i2nsf_registration_interface_rpc', 'nsf-capability-registration', 'output', 'nsf']

  def _get_nsf_name(self):
    """
    Getter method for nsf_name, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_name (string)

    YANG Description: The name of this registered NSF. The NSF name MUST be
unique to identify the NSF with the capability. The name
can be an arbitrary string including Fully Qualified
Domain Name (FQDN).
    """
    return self.__nsf_name
      
  def _set_nsf_name(self, v, load=False):
    """
    Setter method for nsf_name, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_name() directly.

    YANG Description: The name of this registered NSF. The NSF name MUST be
unique to identify the NSF with the capability. The name
can be an arbitrary string including Fully Qualified
Domain Name (FQDN).
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)""",
        })

    self.__nsf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_name(self):
    self.__nsf_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/version (string)

    YANG Description: The NSF's current version level of the software in use.
This string MAY indicate the specific software build date and
target variant information.
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: The NSF's current version level of the software in use.
This string MAY indicate the specific software build date and
target variant information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)


  def _get_directional_capabilities(self):
    """
    Getter method for directional_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/directional_capabilities (identityref)

    YANG Description: The capability of an NSF for handling directional traffic
flow (i.e., unidirectional or bidirectional traffic flow).
    """
    return self.__directional_capabilities
      
  def _set_directional_capabilities(self, v, load=False):
    """
    Setter method for directional_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/directional_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_directional_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_directional_capabilities() directly.

    YANG Description: The capability of an NSF for handling directional traffic
flow (i.e., unidirectional or bidirectional traffic flow).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """directional_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__directional_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_directional_capabilities(self):
    self.__directional_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_event_capabilities(self):
    """
    Getter method for event_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/event_capabilities (container)

    YANG Description: Capabilities of events.
If a network security function has the event capabilities,
the network security function supports rule execution
according to system event and system alarm.
    """
    return self.__event_capabilities
      
  def _set_event_capabilities(self, v, load=False):
    """
    Setter method for event_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/event_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_capabilities() directly.

    YANG Description: Capabilities of events.
If a network security function has the event capabilities,
the network security function supports rule execution
according to system event and system alarm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__event_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_capabilities(self):
    self.__event_capabilities = YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_condition_capabilities(self):
    """
    Getter method for condition_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/condition_capabilities (container)

    YANG Description: Conditions capabilities.
    """
    return self.__condition_capabilities
      
  def _set_condition_capabilities(self, v, load=False):
    """
    Setter method for condition_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/condition_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_condition_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_condition_capabilities() directly.

    YANG Description: Conditions capabilities.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """condition_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__condition_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_condition_capabilities(self):
    self.__condition_capabilities = YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_action_capabilities(self):
    """
    Getter method for action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/action_capabilities (container)

    YANG Description: Action capabilities.
If a network security function has the action capabilities,
the network security function supports the attendant
actions for policy rules.
    """
    return self.__action_capabilities
      
  def _set_action_capabilities(self, v, load=False):
    """
    Setter method for action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/action_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action_capabilities() directly.

    YANG Description: Action capabilities.
If a network security function has the action capabilities,
the network security function supports the attendant
actions for policy rules.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__action_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action_capabilities(self):
    self.__action_capabilities = YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_resolution_strategy_capabilities(self):
    """
    Getter method for resolution_strategy_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/resolution_strategy_capabilities (identityref)

    YANG Description: Resolution strategy capabilities.
The resolution strategies can be used to specify how
to resolve conflicts that occur between the actions
of the similar or different policy rules that are matched
for the same packet and by particular NSF; note that a
badly written policy rule may cause a conflict of actions
with another similar policy rule.
    """
    return self.__resolution_strategy_capabilities
      
  def _set_resolution_strategy_capabilities(self, v, load=False):
    """
    Setter method for resolution_strategy_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/resolution_strategy_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resolution_strategy_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resolution_strategy_capabilities() directly.

    YANG Description: Resolution strategy capabilities.
The resolution strategies can be used to specify how
to resolve conflicts that occur between the actions
of the similar or different policy rules that are matched
for the same packet and by particular NSF; note that a
badly written policy rule may cause a conflict of actions
with another similar policy rule.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resolution_strategy_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__resolution_strategy_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resolution_strategy_capabilities(self):
    self.__resolution_strategy_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_default_action_capabilities(self):
    """
    Getter method for default_action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/default_action_capabilities (identityref)

    YANG Description: Default action capabilities.
A default action is used to execute I2NSF policy rules
when no rule matches a packet. The default action is
defined as pass, drop, reject, rate-limit, or mirror.
    """
    return self.__default_action_capabilities
      
  def _set_default_action_capabilities(self, v, load=False):
    """
    Setter method for default_action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/default_action_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_action_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_action_capabilities() directly.

    YANG Description: Default action capabilities.
A default action is used to execute I2NSF policy rules
when no rule matches a packet. The default action is
defined as pass, drop, reject, rate-limit, or mirror.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_action_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__default_action_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_action_capabilities(self):
    self.__default_action_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_nsf_specification(self):
    """
    Getter method for nsf_specification, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_specification (container)

    YANG Description: The specification of an NSF.
    """
    return self.__nsf_specification
      
  def _set_nsf_specification(self, v, load=False):
    """
    Setter method for nsf_specification, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_specification (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_specification is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_specification() directly.

    YANG Description: The specification of an NSF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_specification must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__nsf_specification = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_specification(self):
    self.__nsf_specification = YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_nsf_access_info(self):
    """
    Getter method for nsf_access_info, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_access_info (container)

    YANG Description: Network access information of this NSF.
    """
    return self.__nsf_access_info
      
  def _set_nsf_access_info(self, v, load=False):
    """
    Setter method for nsf_access_info, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_access_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_access_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_access_info() directly.

    YANG Description: Network access information of this NSF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_access_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__nsf_access_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_access_info(self):
    self.__nsf_access_info = YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)

  nsf_name = __builtin__.property(_get_nsf_name, _set_nsf_name)
  version = __builtin__.property(_get_version, _set_version)
  directional_capabilities = __builtin__.property(_get_directional_capabilities, _set_directional_capabilities)
  event_capabilities = __builtin__.property(_get_event_capabilities, _set_event_capabilities)
  condition_capabilities = __builtin__.property(_get_condition_capabilities, _set_condition_capabilities)
  action_capabilities = __builtin__.property(_get_action_capabilities, _set_action_capabilities)
  resolution_strategy_capabilities = __builtin__.property(_get_resolution_strategy_capabilities, _set_resolution_strategy_capabilities)
  default_action_capabilities = __builtin__.property(_get_default_action_capabilities, _set_default_action_capabilities)
  nsf_specification = __builtin__.property(_get_nsf_specification, _set_nsf_specification)
  nsf_access_info = __builtin__.property(_get_nsf_access_info, _set_nsf_access_info)


  _pyangbind_elements = OrderedDict([('nsf_name', nsf_name), ('version', version), ('directional_capabilities', directional_capabilities), ('event_capabilities', event_capabilities), ('condition_capabilities', condition_capabilities), ('action_capabilities', action_capabilities), ('resolution_strategy_capabilities', resolution_strategy_capabilities), ('default_action_capabilities', default_action_capabilities), ('nsf_specification', nsf_specification), ('nsf_access_info', nsf_access_info), ])


from . import event_capabilities
from . import condition_capabilities
from . import action_capabilities
from . import nsf_specification
from . import nsf_access_info
class nsf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-i2nsf-registration-interface - based on the path /ietf_i2nsf_registration_interface_rpc/nsf-capability-registration/output/nsf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The reply of the query to register the NSFs capabilities.
The capabilities requested in the input field can be covered
by multiple NSFs. This list consists of NSF(s) that cover
every capability specified in the input field.  The
selection method of which NSF(s) that should be listed in
the output field depends on the implementer.  If any of
the capabilities specified in the input field cannot be
covered by any NSF, the reply should return an <rpc-error>
with <error-message> of those capabilities.
  """
  __slots__ = ('_path_helper', '_extmethods', '__nsf_name','__version','__directional_capabilities','__event_capabilities','__condition_capabilities','__action_capabilities','__resolution_strategy_capabilities','__default_action_capabilities','__nsf_specification','__nsf_access_info',)

  _yang_name = 'nsf'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__nsf_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    self.__directional_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__event_capabilities = YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__condition_capabilities = YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__action_capabilities = YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__resolution_strategy_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__default_action_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    self.__nsf_specification = YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    self.__nsf_access_info = YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ietf_i2nsf_registration_interface_rpc', 'nsf-capability-registration', 'output', 'nsf']

  def _get_nsf_name(self):
    """
    Getter method for nsf_name, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_name (string)

    YANG Description: The name of this registered NSF. The NSF name MUST be
unique to identify the NSF with the capability. The name
can be an arbitrary string including Fully Qualified
Domain Name (FQDN).
    """
    return self.__nsf_name
      
  def _set_nsf_name(self, v, load=False):
    """
    Setter method for nsf_name, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_name() directly.

    YANG Description: The name of this registered NSF. The NSF name MUST be
unique to identify the NSF with the capability. The name
can be an arbitrary string including Fully Qualified
Domain Name (FQDN).
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)""",
        })

    self.__nsf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_name(self):
    self.__nsf_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/version (string)

    YANG Description: The NSF's current version level of the software in use.
This string MAY indicate the specific software build date and
target variant information.
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: The NSF's current version level of the software in use.
This string MAY indicate the specific software build date and
target variant information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='string', is_config=True)


  def _get_directional_capabilities(self):
    """
    Getter method for directional_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/directional_capabilities (identityref)

    YANG Description: The capability of an NSF for handling directional traffic
flow (i.e., unidirectional or bidirectional traffic flow).
    """
    return self.__directional_capabilities
      
  def _set_directional_capabilities(self, v, load=False):
    """
    Setter method for directional_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/directional_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_directional_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_directional_capabilities() directly.

    YANG Description: The capability of an NSF for handling directional traffic
flow (i.e., unidirectional or bidirectional traffic flow).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """directional_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__directional_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_directional_capabilities(self):
    self.__directional_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:unidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:bidirectional': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="directional-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_event_capabilities(self):
    """
    Getter method for event_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/event_capabilities (container)

    YANG Description: Capabilities of events.
If a network security function has the event capabilities,
the network security function supports rule execution
according to system event and system alarm.
    """
    return self.__event_capabilities
      
  def _set_event_capabilities(self, v, load=False):
    """
    Setter method for event_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/event_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_capabilities() directly.

    YANG Description: Capabilities of events.
If a network security function has the event capabilities,
the network security function supports rule execution
according to system event and system alarm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__event_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_capabilities(self):
    self.__event_capabilities = YANGDynClass(base=event_capabilities.event_capabilities, is_container='container', yang_name="event-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_condition_capabilities(self):
    """
    Getter method for condition_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/condition_capabilities (container)

    YANG Description: Conditions capabilities.
    """
    return self.__condition_capabilities
      
  def _set_condition_capabilities(self, v, load=False):
    """
    Setter method for condition_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/condition_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_condition_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_condition_capabilities() directly.

    YANG Description: Conditions capabilities.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """condition_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__condition_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_condition_capabilities(self):
    self.__condition_capabilities = YANGDynClass(base=condition_capabilities.condition_capabilities, is_container='container', yang_name="condition-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_action_capabilities(self):
    """
    Getter method for action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/action_capabilities (container)

    YANG Description: Action capabilities.
If a network security function has the action capabilities,
the network security function supports the attendant
actions for policy rules.
    """
    return self.__action_capabilities
      
  def _set_action_capabilities(self, v, load=False):
    """
    Setter method for action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/action_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action_capabilities() directly.

    YANG Description: Action capabilities.
If a network security function has the action capabilities,
the network security function supports the attendant
actions for policy rules.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__action_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action_capabilities(self):
    self.__action_capabilities = YANGDynClass(base=action_capabilities.action_capabilities, is_container='container', yang_name="action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_resolution_strategy_capabilities(self):
    """
    Getter method for resolution_strategy_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/resolution_strategy_capabilities (identityref)

    YANG Description: Resolution strategy capabilities.
The resolution strategies can be used to specify how
to resolve conflicts that occur between the actions
of the similar or different policy rules that are matched
for the same packet and by particular NSF; note that a
badly written policy rule may cause a conflict of actions
with another similar policy rule.
    """
    return self.__resolution_strategy_capabilities
      
  def _set_resolution_strategy_capabilities(self, v, load=False):
    """
    Setter method for resolution_strategy_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/resolution_strategy_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resolution_strategy_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resolution_strategy_capabilities() directly.

    YANG Description: Resolution strategy capabilities.
The resolution strategies can be used to specify how
to resolve conflicts that occur between the actions
of the similar or different policy rules that are matched
for the same packet and by particular NSF; note that a
badly written policy rule may cause a conflict of actions
with another similar policy rule.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resolution_strategy_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__resolution_strategy_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resolution_strategy_capabilities(self):
    self.__resolution_strategy_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:fmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:lmr': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmre': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}, 'i2nsfcap:pmrn': {'@module': 'ietf-i2nsf-capability', '@namespace': 'urn:ietf:params:xml:ns:yang:ietf-i2nsf-capability'}},)), is_leaf=False, yang_name="resolution-strategy-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_default_action_capabilities(self):
    """
    Getter method for default_action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/default_action_capabilities (identityref)

    YANG Description: Default action capabilities.
A default action is used to execute I2NSF policy rules
when no rule matches a packet. The default action is
defined as pass, drop, reject, rate-limit, or mirror.
    """
    return self.__default_action_capabilities
      
  def _set_default_action_capabilities(self, v, load=False):
    """
    Setter method for default_action_capabilities, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/default_action_capabilities (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_action_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_action_capabilities() directly.

    YANG Description: Default action capabilities.
A default action is used to execute I2NSF policy rules
when no rule matches a packet. The default action is
defined as pass, drop, reject, rate-limit, or mirror.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_action_capabilities must be of a type compatible with identityref""",
          'defined-type': "ietf-i2nsf-registration-interface:identityref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)""",
        })

    self.__default_action_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_action_capabilities(self):
    self.__default_action_capabilities = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={},)), is_leaf=False, yang_name="default-action-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='identityref', is_config=True)


  def _get_nsf_specification(self):
    """
    Getter method for nsf_specification, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_specification (container)

    YANG Description: The specification of an NSF.
    """
    return self.__nsf_specification
      
  def _set_nsf_specification(self, v, load=False):
    """
    Setter method for nsf_specification, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_specification (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_specification is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_specification() directly.

    YANG Description: The specification of an NSF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_specification must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__nsf_specification = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_specification(self):
    self.__nsf_specification = YANGDynClass(base=nsf_specification.nsf_specification, is_container='container', yang_name="nsf-specification", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)


  def _get_nsf_access_info(self):
    """
    Getter method for nsf_access_info, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_access_info (container)

    YANG Description: Network access information of this NSF.
    """
    return self.__nsf_access_info
      
  def _set_nsf_access_info(self, v, load=False):
    """
    Setter method for nsf_access_info, mapped from YANG variable /ietf_i2nsf_registration_interface_rpc/nsf_capability_registration/output/nsf/nsf_access_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf_access_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf_access_info() directly.

    YANG Description: Network access information of this NSF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf_access_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)""",
        })

    self.__nsf_access_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf_access_info(self):
    self.__nsf_access_info = YANGDynClass(base=nsf_access_info.nsf_access_info, is_container='container', yang_name="nsf-access-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-i2nsf-registration-interface', defining_module='ietf-i2nsf-registration-interface', yang_type='container', is_config=True)

  nsf_name = __builtin__.property(_get_nsf_name, _set_nsf_name)
  version = __builtin__.property(_get_version, _set_version)
  directional_capabilities = __builtin__.property(_get_directional_capabilities, _set_directional_capabilities)
  event_capabilities = __builtin__.property(_get_event_capabilities, _set_event_capabilities)
  condition_capabilities = __builtin__.property(_get_condition_capabilities, _set_condition_capabilities)
  action_capabilities = __builtin__.property(_get_action_capabilities, _set_action_capabilities)
  resolution_strategy_capabilities = __builtin__.property(_get_resolution_strategy_capabilities, _set_resolution_strategy_capabilities)
  default_action_capabilities = __builtin__.property(_get_default_action_capabilities, _set_default_action_capabilities)
  nsf_specification = __builtin__.property(_get_nsf_specification, _set_nsf_specification)
  nsf_access_info = __builtin__.property(_get_nsf_access_info, _set_nsf_access_info)


  _pyangbind_elements = OrderedDict([('nsf_name', nsf_name), ('version', version), ('directional_capabilities', directional_capabilities), ('event_capabilities', event_capabilities), ('condition_capabilities', condition_capabilities), ('action_capabilities', action_capabilities), ('resolution_strategy_capabilities', resolution_strategy_capabilities), ('default_action_capabilities', default_action_capabilities), ('nsf_specification', nsf_specification), ('nsf_access_info', nsf_access_info), ])


