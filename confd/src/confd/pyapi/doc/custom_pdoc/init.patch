--- build-venv/lib/python3.7/site-packages/pdoc/__init__.py	2020-08-27 18:36:00.000000000 -0400
+++ custom_pdoc/__init__.py	2020-11-10 10:13:08.568573103 -0500
@@ -35,10 +35,11 @@
 try:
     from pdoc._version import version as __version__  # noqa: F401
 except ImportError:
     __version__ = '???'  # Package not installed
 
+custom_globals = {}
 
 _get_type_hints = lru_cache()(typing.get_type_hints)
 
 _URL_MODULE_SUFFIX = '.html'
 _URL_INDEX_MODULE_SUFFIX = '.m.html'  # For modules named literal 'index'
@@ -659,11 +660,23 @@
                         if module_name:
                             yield module_name
                         if isdir(join(pth, file)) and '.' not in file:
                             yield file
 
-            for root in iter_modules(self.obj.__path__):
+            def iter_all_modules(mdoc):
+                """
+                Modules written in C may lack above filesystem structure.
+                Search members for submodules and process those as well.
+                """
+                yield from iter_modules(mdoc.obj.__path__)
+
+                for name, obj in inspect.getmembers(mdoc.obj):
+                    if (inspect.ismodule(obj) and hasattr(obj, '__name__') and
+                            obj.__name__.startswith(mdoc.refname + '.')):
+                        yield name
+
+            for root in iter_all_modules(self):
                 # Ignore if this module was already doc'd.
                 if root in self.doc:
                     continue
 
                 # Ignore if it isn't exported
@@ -1295,17 +1308,19 @@
             # MRO to still satisfy https://github.com/pdoc3/pdoc/issues/124
             if (
                 inspect.isclass(doc_obj.obj)
                 and doc_obj.obj.__init__ is not object.__init__
             ):
+                # If source is missing, below would return generic (*args, **kwargs)
+                inspect.getsource(doc_obj.obj)
                 # Remove the first argument (self) from __init__ signature
                 init_sig = inspect.signature(doc_obj.obj.__init__)
                 init_params = list(init_sig.parameters.values())
                 signature = init_sig.replace(parameters=init_params[1:])
             else:
                 signature = inspect.signature(doc_obj.obj)
-        except ValueError:
+        except (ValueError, TypeError, OSError):
             signature = Function._signature_from_string(doc_obj)
             if not signature:
                 return ['...']
 
         def safe_default_value(p: inspect.Parameter):
@@ -1399,10 +1414,12 @@
     def _signature_from_string(self):
         signature = None
         for expr, cleanup_docstring, filter in (
                 # Full proper typed signature, such as one from pybind11
                 (r'^{}\(.*\)(?: -> .*)?$', True, lambda s: s),
+                # Same as above but with line break(s)
+                (r'^{}\([^)]+\)(?: -> .*)?$', True, lambda s: s),
                 # Human-readable, usage-like signature from some Python builtins
                 # (e.g. `range` or `slice` or `itertools.repeat` or `numpy.arange`)
                 (r'^{}\(.*\)(?= -|$)', False, lambda s: s.replace('[', '').replace(']', '')),
         ):
             strings = sorted(re.findall(expr.format(self.name),
@@ -1412,22 +1429,25 @@
                 string = filter(strings[0])
                 _locals, _globals = {}, {}
                 _globals.update({'capsule': None})  # pybind11 capsule data type
                 _globals.update(typing.__dict__)
                 _globals.update(self.module.obj.__dict__)
+                _globals.update(custom_globals)
                 # Trim binding module basename from type annotations
                 # See: https://github.com/pdoc3/pdoc/pull/148#discussion_r407114141
                 module_basename = self.module.name.rsplit('.', maxsplit=1)[-1]
                 if module_basename in string and module_basename not in _globals:
                     string = re.sub(r'(?<!\.)\b{}\.\b'.format(module_basename), '', string)
 
                 try:
                     exec('def {}: pass'.format(string), _globals, _locals)
-                except SyntaxError:
+                except (SyntaxError, NameError, TypeError) as e:
+                    warn('Invalid function signature for {}: {}'.format(self.refname, e))
                     continue
                 signature = inspect.signature(_locals[self.name])
-                if cleanup_docstring and len(strings) == 1:
+                if cleanup_docstring and len(strings) == 1 \
+                        and self.docstring.lstrip().startswith(strings[0]):
                     # Remove signature from docstring variable
                     self.docstring = self.docstring.replace(strings[0], '')
                 break
         return signature
 
