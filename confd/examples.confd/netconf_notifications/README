Example: Implementing NETCONF Notification Streams
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to implement NETCONF Notification streams. The
example is based on the IETF standard for Subscribed Notifications,
defined in RFC 5277 extended by RFC 8639 Subscription to YANG
Notifications.

Two C applications (notifier_builtin_replay_store.c and notifier.c) and a
Python application (notifier_builtin_replay_store.py) are provided which
implements either a a notification stream with built-in replay support or
with externally implemented replay support.

notifier.c keeps its replay log in memory for simplicity.  A real
external replay store implementation would keep the replay log on disk.

The notifications are specified in notif.yang.

In confd.conf, the stream 'interface' is defined, and the NETCONF
notification capability is enabled.

A NETCONF client called 'netconf-console' is used in this example to
subscribe for and view NETCONF notifications.  The 'netconf-console'
is part of the ConfD installation (found in the 'bin' directory). This
client communicates with ConfD over SSH and requires Python Paramiko
package (on Ubuntu you can install it by command 'apt-get install
python-paramiko').  In case SSH cannot be used, there is
'netconf-console-tcp' variant. To use 'netconf-console-tcp', update
'confd.conf' to enable 'netconf/transport/tcp' and change all
'netconf-console' calls to 'netconf-console-tcp' (in 'Makefile').

RFC 5277 and RFC 8639
~~~~~~~~~~~~~~~~~~~~~
To use RFC 8639 filters and add-ons instead of plain RFC 5277 features,
replace nc-start, nc-subscribe, and nc-filter below with nc-start-rfc8639,
nc-subscribe-rfc8639, and nc-filter-rfc8639.

Starting the C Example
~~~~~~~~~~~~~~~~~~~~~~

 1. Build the necessary files and start ConfD using the builtin replay
    store and notifier by typing

        $ make all start-builtin

    notifier_builtin_replay_store.c is now started in the foreground.

    Alternative: To start notifier.c (implementing replay store
    outside of ConfD) do the following instead:

        $ make all start-external

 2. In order to make the notifier program generate some notifications,
    hit 'y', 'u', 'i', or 'd', followed by <enter>.  (see the C
    application files for details).

 3. In another shell, to query the stream information, type

        $ make nc-query

 4. In the new shell, type

        $ make nc-replay

    to replay all logged notifications, and continue with the live feed.

 5. Generate some more notifications as in step 2, and watch them
    arrive as XML in the new shell from step 3.

 6. In a third shell, type

        $ make nc-subscribe

    to subscribe to the live feed only. Repeat step 3.

 7. In another shell, to query the subscription information, type

        $ make nc-subscriptions

 8. It's also possible to filter events. To only see link-down events do:

        $ make nc-filter

    Now you should only see events generated by the 'd' command, not events
    generated by 'i', 'u' or 'y'.

 9. Ctrl-c to terminate the session when the notifications are
    generated.

Starting the Python Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~

 1. Build the necessary files and start ConfD using the builtin replay
    store and notifier by typing

        $ make all start-py

    notifier_builtin_replay_store.py is now started in the foreground.

 2. In order to make the notifier program generate some notifications,
    hit 'u' or 'd', followed by <enter>.  (see the Python script for
    details).

 3. In another shell, to query the stream information, type

        $ make nc-query

 4. In the new shell, type

        $ make nc-replay

    to replay all logged notifications, and continue with the live feed.

 5. Generate some more notifications as in step 2, and watch them
    arrive as XML in the new shell from step 3.

 6. In a third shell, type

        $ make nc-subscribe

    to subscribe to the live feed only. Repeat step 3.

 7. In another shell, to query the subscription information, type

        $ make nc-subscriptions

 8. It's also possible to filter events. To only see link-down events do:

        $ make nc-filter

    Now you should only see events generated by the 'd' command, not events
    generated by 'u'.

 9. Ctrl-c to terminate the session when the notifications are
    generated.
